{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _jsxFileName = \"/home/titan/try-again/app/App.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ApolloProvider, ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';\nimport Login from \"./components/LoginOrSignUp\";\nimport * as firebase from 'firebase';\nvar client = new ApolloClient({\n  uri: 'http://10.0.0.197:4000',\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network'\n    }\n  }\n});\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCRn68IcS4b5F_jdyTGXIIYZWhK62T4S9g\",\n  authDomain: \"botanistquest.firebaseapp.com\",\n  databaseURL: 'https://botanistquest-default-rtdb.firebaseio.com/',\n  projectId: \"botanistquest\",\n  storageBucket: \"botanistquest.appspot.com\",\n  messagingSenderId: \"171136312997\",\n  appId: \"1:171136312997:web:d704b610a1af197ce94f4c\",\n  measurementId: \"G-F4BRHG5G51\"\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\nvar GET_HELLO = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  query GetHello{\\n    hello\\n  }\\n\"])));\n\nfunction Navigator() {\n  var _useQuery = useQuery(GET_HELLO),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  useEffect(function () {\n    console.log(loading, data);\n    console.log('ERR', error);\n  }, [count]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default function App() {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nAppRegistry.registerComponent('MyApplication', function () {\n  return App;\n});","map":{"version":3,"sources":["/home/titan/try-again/app/App.js"],"names":["StatusBar","React","useEffect","useState","ApolloProvider","ApolloClient","InMemoryCache","gql","useQuery","Login","firebase","client","uri","cache","defaultOptions","watchQuery","fetchPolicy","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","analytics","GET_HELLO","Navigator","loading","error","data","count","setCount","console","log","styles","container","App","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","AppRegistry","registerComponent"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;AAGA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,EAAsDC,GAAtD,EAA2DC,QAA3D,QAA2E,gBAA3E;AACA,OAAOC,KAAP;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AASA,IAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAE,wBADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIP,aAAJ,EAFuB;AAG9BQ,EAAAA,cAAc,EAAE;AACdC,IAAAA,UAAU,EAAE;AACVC,MAAAA,WAAW,EAAE;AADH;AADE;AAHc,CAAjB,CAAf;AAYA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,+BAFS;AAGrBC,EAAAA,WAAW,EAAE,oDAHQ;AAIrBC,EAAAA,SAAS,EAAE,eAJU;AAKrBC,EAAAA,aAAa,EAAE,2BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB;AAYAf,QAAQ,CAACgB,aAAT,CAAuBT,cAAvB;AACAP,QAAQ,CAACiB,SAAT;AAEA,IAAMC,SAAS,GAAGrB,GAAH,+GAAf;;AAMA,SAASsB,SAAT,GAAqB;AAAA,kBACcrB,QAAQ,CAACoB,SAAD,CADtB;AAAA,MACXE,OADW,aACXA,OADW;AAAA,MACFC,KADE,aACFA,KADE;AAAA,MACKC,IADL,aACKA,IADL;;AAAA,kBAEO7B,QAAQ,CAAC,CAAD,CAFf;AAAA;AAAA,MAEZ8B,KAFY;AAAA,MAELC,QAFK;;AAInBhC,EAAAA,SAAS,CAAC,YAAM;AACdiC,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ,EAAqBE,IAArB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,KAAnB;AACD,GAHQ,EAGN,CAACE,KAAD,CAHM,CAAT;AAKA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEI,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,OAAO,GACN,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADM,GAGN,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAJJ,CADF;AAcD;;AAED,eAAe,SAASS,GAAT,GAAe;AAC5B,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAE5B,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;AAED,IAAM0B,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf;AASAC,WAAW,CAACC,iBAAZ,CAA8B,eAA9B,EAA+C;AAAA,SAAMR,GAAN;AAAA,CAA/C","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport { AppRegistry } from 'react-native';\nimport { StyleSheet, Button, Text, View } from 'react-native';\nimport { ApolloProvider, ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';\nimport Login from './components/LoginOrSignUp';\nimport * as firebase from 'firebase';\n\n// Optionally import the services that you want to use\n//import \"firebase/auth\";\n//import \"firebase/database\";\n//import \"firebase/firestore\";\n//import \"firebase/functions\";\n//import \"firebase/storage\";\n\nconst client = new ApolloClient({\n  uri: 'http://10.0.0.197:4000',\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network',\n    },\n  }\n});\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCRn68IcS4b5F_jdyTGXIIYZWhK62T4S9g\",\n  authDomain: \"botanistquest.firebaseapp.com\",\n  databaseURL: 'https://botanistquest-default-rtdb.firebaseio.com/', //TODO\n  projectId: \"botanistquest\",\n  storageBucket: \"botanistquest.appspot.com\",\n  messagingSenderId: \"171136312997\",\n  appId: \"1:171136312997:web:d704b610a1af197ce94f4c\",\n  measurementId: \"G-F4BRHG5G51\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nconst GET_HELLO = gql`\n  query GetHello{\n    hello\n  }\n`\n\nfunction Navigator() {\n  const { loading, error, data } = useQuery(GET_HELLO);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log(loading, data)\n    console.log('ERR', error);\n  }, [count]);\n\n  return (\n    <View style={styles.container}>\n      {loading ?\n        <Text>Loading...</Text>\n        :\n        <View>\n          {/* <Text>{data.hello ? data.hello : \"err\"}poop</Text>\n          <Button title=\"FUK\" onPress={() => setCount(count + 1)} /> */}\n          <Login />\n        </View>\n      }\n    </View>\n  )\n\n}\n\nexport default function App() {\n  return (\n    <ApolloProvider client={client}>\n      <Navigator />\n    </ApolloProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nAppRegistry.registerComponent('MyApplication', () => App);"]},"metadata":{},"sourceType":"module"}