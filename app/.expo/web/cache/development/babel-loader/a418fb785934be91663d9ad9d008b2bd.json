{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/titan/try-again/app/components/LoginOrSignUp.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport crypt from 'react-native-simple-crypto';\nexport default function isLoggingIn() {\n  var textInputStyle = {\n    height: 40\n  };\n\n  var _useState = useState({\n    isLoggingIn: true,\n    name: '',\n    username: '',\n    password: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formState = _useState2[0],\n      setFormState = _useState2[1];\n\n  var hashPassword = function hashPassword() {};\n\n  var checkPassword = function checkPassword() {\n    var hash, messageArrayBuffer, keyArrayBuffer, cipherTextArrayBuffer, decryptedArrayBuffer;\n    return _regeneratorRuntime.async(function checkPassword$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            messageArrayBuffer = crypt.utils.convertUtf8ToArrayBuffer(formState.password);\n            keyArrayBuffer = crypt.utils.randomBytes(32);\n            console.log(\"randomBytes key\", toHex(keyArrayBuffer));\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(crypt.AES.encrypt(messageArrayBuffer, keyArrayBuffer, ivArrayBuffer));\n\n          case 5:\n            cipherTextArrayBuffer = _context.sent;\n            console.log(\"AES encrypt\", toHex(cipherTextArrayBuffer));\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(crypt.AES.decrypt(cipherTextArrayBuffer, keyArrayBuffer, ivArrayBuffer));\n\n          case 9:\n            decryptedArrayBuffer = _context.sent;\n            console.log(\"AES decrypt\", toUtf8(decryptedArrayBuffer));\n            console.log(\"passwords match: \" + toUtf8(decryptedArrayBuffer) == '1234');\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var submitLogInForm = function submitLogInForm() {\n    console.log(formState);\n    checkPassword();\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: textInputStyle,\n    placeholder: \"username\",\n    onChangeText: function onChangeText(text) {\n      return setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n        username: text\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    style: textInputStyle,\n    placeholder: \"password\",\n    onChangeText: function onChangeText(text) {\n      return setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n        password: text\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"submit\",\n    onPress: function onPress() {\n      return submitLogInForm();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/titan/try-again/app/components/LoginOrSignUp.js"],"names":["React","useState","crypt","isLoggingIn","textInputStyle","height","name","username","password","formState","setFormState","hashPassword","checkPassword","messageArrayBuffer","utils","convertUtf8ToArrayBuffer","keyArrayBuffer","randomBytes","console","log","toHex","AES","encrypt","ivArrayBuffer","cipherTextArrayBuffer","decrypt","decryptedArrayBuffer","toUtf8","submitLogInForm","text"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,OAAOC,KAAP,MAAkB,4BAAlB;AAEA,eAAe,SAASC,WAAT,GAAuB;AAClC,MAAMC,cAAc,GAAG;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAvB;;AADkC,kBAEAJ,QAAQ,CAAC;AACvCE,IAAAA,WAAW,EAAE,IAD0B;AAEvCG,IAAAA,IAAI,EAAE,EAFiC;AAGvCC,IAAAA,QAAQ,EAAE,EAH6B;AAIvCC,IAAAA,QAAQ,EAAE;AAJ6B,GAAD,CAFR;AAAA;AAAA,MAE3BC,SAF2B;AAAA,MAEhBC,YAFgB;;AASlC,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM,CAE1B,CAFD;;AAIA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZC,YAAAA,kBAFY,GAESX,KAAK,CAACY,KAAN,CAAYC,wBAAZ,CACvBN,SAAS,CAACD,QADa,CAFT;AAMZQ,YAAAA,cANY,GAMKd,KAAK,CAACY,KAAN,CAAYG,WAAZ,CAAwB,EAAxB,CANL;AAOlBC,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,KAAK,CAACJ,cAAD,CAApC;AAPkB;AAAA,6CASkBd,KAAK,CAACmB,GAAN,CAAUC,OAAV,CAChCT,kBADgC,EAEhCG,cAFgC,EAGhCO,aAHgC,CATlB;;AAAA;AASZC,YAAAA,qBATY;AAclBN,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,KAAK,CAACI,qBAAD,CAAhC;AAdkB;AAAA,6CAgBiBtB,KAAK,CAACmB,GAAN,CAAUI,OAAV,CAC/BD,qBAD+B,EAE/BR,cAF+B,EAG/BO,aAH+B,CAhBjB;;AAAA;AAgBZG,YAAAA,oBAhBY;AAqBlBR,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BQ,MAAM,CAACD,oBAAD,CAAjC;AAEAR,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBQ,MAAM,CAACD,oBAAD,CAA5B,IAAsD,MAAlE;;AAvBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AA0BA,MAAME,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BV,IAAAA,OAAO,CAACC,GAAR,CAAYV,SAAZ;AACAG,IAAAA,aAAa;AAChB,GAHD;;AAKA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAER,cADX;AAEI,IAAA,WAAW,EAAC,UAFhB;AAGI,IAAA,YAAY,EAAE,sBAAAyB,IAAI;AAAA,aAAInB,YAAY,iCAC3BD,SAD2B;AAE9BF,QAAAA,QAAQ,EAAEsB;AAFoB,SAAhB;AAAA,KAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAUI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEzB,cADX;AAEI,IAAA,WAAW,EAAC,UAFhB;AAGI,IAAA,YAAY,EAAE,sBAAAyB,IAAI;AAAA,aAAInB,YAAY,iCAC3BD,SAD2B;AAE9BD,QAAAA,QAAQ,EAAEqB;AAFoB,SAAhB;AAAA,KAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAkBI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAE;AAAA,aAAMD,eAAe,EAArB;AAAA,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,CADJ;AAyBH","sourcesContent":["import React, { useState } from 'react';\nimport { TextInput, Button, Text, View } from 'react-native';\nimport crypt from 'react-native-simple-crypto';\n\nexport default function isLoggingIn() {\n    const textInputStyle = { height: 40 };\n    const [formState, setFormState] = useState({\n        isLoggingIn: true,\n        name: '',\n        username: '',\n        password: ''\n    });\n\n    const hashPassword = () => {\n\n    }\n\n    const checkPassword = async () => {\n        let hash; //TODO get hash from db\n        const messageArrayBuffer = crypt.utils.convertUtf8ToArrayBuffer(\n            formState.password\n        );\n\n        const keyArrayBuffer = crypt.utils.randomBytes(32);\n        console.log(\"randomBytes key\", toHex(keyArrayBuffer));\n\n        const cipherTextArrayBuffer = await crypt.AES.encrypt(\n            messageArrayBuffer,\n            keyArrayBuffer,\n            ivArrayBuffer\n        );\n        console.log(\"AES encrypt\", toHex(cipherTextArrayBuffer))\n\n        const decryptedArrayBuffer = await crypt.AES.decrypt(\n            cipherTextArrayBuffer,\n            keyArrayBuffer,\n            ivArrayBuffer\n        );\n        console.log(\"AES decrypt\", toUtf8(decryptedArrayBuffer));\n\n        console.log(\"passwords match: \" + toUtf8(decryptedArrayBuffer) == '1234')\n    }\n\n    const submitLogInForm = () => {\n        console.log(formState);\n        checkPassword();\n    }\n\n    return (\n        <View>\n            {/* TODO logo */}\n            <TextInput\n                style={textInputStyle}\n                placeholder='username'\n                onChangeText={text => setFormState({\n                    ...formState,\n                    username: text\n                })}\n            />\n            <TextInput\n                style={textInputStyle}\n                placeholder='password'\n                onChangeText={text => setFormState({\n                    ...formState,\n                    password: text\n                })}\n            />\n            <Button\n                title=\"submit\"\n                onPress={() => submitLogInForm()}\n            />\n        </View>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}